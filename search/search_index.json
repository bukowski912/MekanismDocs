{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome the site! Please navigate around using the menu at the top of the page. Official Links For the Official GitHub, visit here . For the Official Wiki, visit here . Mod Versions Note: Versions not listed are no longer actively supported. Game Version Latest Mod Version 1.21.1 10.7.8.70 ( GitHub ) 1.20.1 10.4.14.71 ( GitHub ) 1.19.2 10.3.9.13 ( GitHub )","title":"Home"},{"location":"#welcome","text":"Welcome the site! Please navigate around using the menu at the top of the page.","title":"Welcome"},{"location":"#official-links","text":"For the Official GitHub, visit here . For the Official Wiki, visit here .","title":"Official Links"},{"location":"#mod-versions","text":"Note: Versions not listed are no longer actively supported. Game Version Latest Mod Version 1.21.1 10.7.8.70 ( GitHub ) 1.20.1 10.4.14.71 ( GitHub ) 1.19.2 10.3.9.13 ( GitHub )","title":"Mod Versions"},{"location":"configs/","text":"Configs Index 1.21.1 1.20.1 1.19.2 ( WIP )","title":"Configs"},{"location":"configs/#configs-index","text":"1.21.1 1.20.1 1.19.2 ( WIP )","title":"Configs Index"},{"location":"systems/","text":"Systems Multiblocks Heat System ( WIP )","title":"Systems"},{"location":"systems/#systems","text":"Multiblocks Heat System ( WIP )","title":"Systems"},{"location":"configs/1.19.2/","text":"Configs for 1.19.2 Common Client Common #Mekanism Common Config. This config is not synced between server and client. [common] #Displayed energy type in Mekanism GUIs and network reader readings. #Allowed Values: JOULES, FORGE_ENERGY, ELECTRICAL_UNITS energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs and network reader readings. #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Show time to decay radiation when readings are above safe levels. Set to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true Client #Client Config. This config only exists on the client [client] #Play sounds for Jetpack/Gas Mask/Flamethrower/Radiation (all players). enablePlayerSounds = true #If enabled machines play their sounds while running. enableMachineSounds = true #If enabled tries to force all radial menu text to be white. whiteRadialText = false #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years). holidays = true #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. #Range: 0.0 ~ 10.0 baseSoundVolume = 1.0 #If true, don't render Cables/Pipes/Tubes as transparent and don't render their contents. opaqueTransmitters = false #Allow sneak + scroll to change item modes. allowModeScroll = true #If true will move HUD text alignment and compass rendering to the right side of the screen, and move the MekaSuit module rendering to the left side. reverseHUD = false #Scale of the text displayed on the HUD. #Range: 0.25 ~ 1.0 hudScale = 0.6 #Enable item information HUD during gameplay enableHUD = true #Color of energy in item durability display. energyColor = 3997338 #Range at which Tile Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for TERs to 64 for most blocks, but uses a range of 256 for beacons and end gateways. #Range: 1 ~ 1024 terRange = 256 #Particle Config [client.particle] #Set to false to prevent particle spam when loading multiblocks (notification message will display instead). enableMultiblockFormationParticles = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. #Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). #Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts when the Magnetic Attraction Unit is pulling items. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #GUI Config [client.gui] #Opacity of HUD used by MekaSuit. #Range: 0.0 ~ 1.0 hudOpacity = 0.4000000059604645 #Color of HUD used by MekaSuit. hudColor = 4257264 #Color of warning HUD elements used by MekaSuit. hudWarningColor = 16768335 #Color of danger HUD elements used by MekaSuit. hudDangerColor = 16726076 #Visual jitter of MekaSuit HUD, seen when moving the player's head. Bigger value = more jitter. #Range: 1.0 ~ 100.0 hudJitter = 6.0 #Display a fancy compass when the MekaSuit is worn. mekaSuitHelmetCompass = true #Last Window Positions. In general these values should not be modified manually. [client.gui.window] [client.gui.window.color] x = 2147483647 y = 2147483647 [client.gui.window.confirmation] x = 2147483647 y = 2147483647 [client.gui.window.crafting0] x = 2147483647 y = 2147483647 [client.gui.window.crafting1] x = 2147483647 y = 2147483647 [client.gui.window.crafting2] x = 2147483647 y = 2147483647 [client.gui.window.mekaSuitHelmet] x = 2147483647 y = 2147483647 [client.gui.window.rename] x = 2147483647 y = 2147483647 [client.gui.window.skinSelect] x = 2147483647 y = 2147483647 [client.gui.window.sideConfig] x = 10 y = 15 [client.gui.window.transporterConfig] x = 2147483647 y = 2147483647 [client.gui.window.upgrade] x = 2147483647 y = 2147483647 #QIO Config [client.qio] #Sorting strategy when viewing items in a QIO Item Viewer. #Allowed Values: NAME, SIZE, MOD itemViewerSortType = \"NAME\" #Sorting direction when viewing items in a QIO Item Viewer. #Allowed Values: ASCENDING, DESCENDING itemViewerSortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Item Viewer. #Range: 8 ~ 16 itemViewerSlotsX = 8 #Number of slots to view vertically on a QIO Item Viewer. #Range: 2 ~ 48 itemViewerSlotsY = 4","title":"Configs for 1.19.2"},{"location":"configs/1.19.2/#configs-for-1192","text":"Common Client","title":"Configs for 1.19.2"},{"location":"configs/1.19.2/#common","text":"#Mekanism Common Config. This config is not synced between server and client. [common] #Displayed energy type in Mekanism GUIs and network reader readings. #Allowed Values: JOULES, FORGE_ENERGY, ELECTRICAL_UNITS energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs and network reader readings. #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Show time to decay radiation when readings are above safe levels. Set to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true","title":"Common"},{"location":"configs/1.19.2/#client","text":"#Client Config. This config only exists on the client [client] #Play sounds for Jetpack/Gas Mask/Flamethrower/Radiation (all players). enablePlayerSounds = true #If enabled machines play their sounds while running. enableMachineSounds = true #If enabled tries to force all radial menu text to be white. whiteRadialText = false #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years). holidays = true #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. #Range: 0.0 ~ 10.0 baseSoundVolume = 1.0 #If true, don't render Cables/Pipes/Tubes as transparent and don't render their contents. opaqueTransmitters = false #Allow sneak + scroll to change item modes. allowModeScroll = true #If true will move HUD text alignment and compass rendering to the right side of the screen, and move the MekaSuit module rendering to the left side. reverseHUD = false #Scale of the text displayed on the HUD. #Range: 0.25 ~ 1.0 hudScale = 0.6 #Enable item information HUD during gameplay enableHUD = true #Color of energy in item durability display. energyColor = 3997338 #Range at which Tile Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for TERs to 64 for most blocks, but uses a range of 256 for beacons and end gateways. #Range: 1 ~ 1024 terRange = 256 #Particle Config [client.particle] #Set to false to prevent particle spam when loading multiblocks (notification message will display instead). enableMultiblockFormationParticles = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. #Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). #Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts when the Magnetic Attraction Unit is pulling items. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #GUI Config [client.gui] #Opacity of HUD used by MekaSuit. #Range: 0.0 ~ 1.0 hudOpacity = 0.4000000059604645 #Color of HUD used by MekaSuit. hudColor = 4257264 #Color of warning HUD elements used by MekaSuit. hudWarningColor = 16768335 #Color of danger HUD elements used by MekaSuit. hudDangerColor = 16726076 #Visual jitter of MekaSuit HUD, seen when moving the player's head. Bigger value = more jitter. #Range: 1.0 ~ 100.0 hudJitter = 6.0 #Display a fancy compass when the MekaSuit is worn. mekaSuitHelmetCompass = true #Last Window Positions. In general these values should not be modified manually. [client.gui.window] [client.gui.window.color] x = 2147483647 y = 2147483647 [client.gui.window.confirmation] x = 2147483647 y = 2147483647 [client.gui.window.crafting0] x = 2147483647 y = 2147483647 [client.gui.window.crafting1] x = 2147483647 y = 2147483647 [client.gui.window.crafting2] x = 2147483647 y = 2147483647 [client.gui.window.mekaSuitHelmet] x = 2147483647 y = 2147483647 [client.gui.window.rename] x = 2147483647 y = 2147483647 [client.gui.window.skinSelect] x = 2147483647 y = 2147483647 [client.gui.window.sideConfig] x = 10 y = 15 [client.gui.window.transporterConfig] x = 2147483647 y = 2147483647 [client.gui.window.upgrade] x = 2147483647 y = 2147483647 #QIO Config [client.qio] #Sorting strategy when viewing items in a QIO Item Viewer. #Allowed Values: NAME, SIZE, MOD itemViewerSortType = \"NAME\" #Sorting direction when viewing items in a QIO Item Viewer. #Allowed Values: ASCENDING, DESCENDING itemViewerSortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Item Viewer. #Range: 8 ~ 16 itemViewerSlotsX = 8 #Number of slots to view vertically on a QIO Item Viewer. #Range: 2 ~ 48 itemViewerSlotsY = 4","title":"Client"},{"location":"configs/1.20.1/","text":"Configs for 1.20.1 Common Client Common #Mekanism Common Config. This config is not synced between server and client. [common] #Displayed energy type in Mekanism GUIs and network reader readings. #Allowed Values: JOULES, FORGE_ENERGY, ELECTRICAL_UNITS energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs and network reader readings. #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Show time to decay radiation when readings are above safe levels. Set to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true Client #Client Config. This config only exists on the client [client] #Play sounds for Jetpack/Gas Mask/Flamethrower/Radiation (all players). enablePlayerSounds = true #If enabled machines play their sounds while running. enableMachineSounds = true #If enabled tries to force all radial menu text to be white. whiteRadialText = false #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years). holidays = true #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. #Range: 0.0 ~ 10.0 baseSoundVolume = 1.0 #If true, don't render Cables/Pipes/Tubes as transparent and don't render their contents. opaqueTransmitters = false #Allow sneak + scroll to change item modes. allowModeScroll = true #If true will move HUD text alignment and compass rendering to the right side of the screen, and move the MekaSuit module rendering to the left side. reverseHUD = false #Scale of the text displayed on the HUD. #Range: 0.25 ~ 1.0 hudScale = 0.6 #Enable item information HUD during gameplay enableHUD = true #Color of energy in item durability display. energyColor = 3997338 #Range at which Tile Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for TERs to 64 for most blocks, but uses a range of 256 for beacons and end gateways. #Range: 1 ~ 1024 terRange = 256 #Particle Config [client.particle] #Set to false to prevent particle spam when loading multiblocks (notification message will display instead). enableMultiblockFormationParticles = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. #Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). #Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts when the Magnetic Attraction Unit is pulling items. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #GUI Config [client.gui] #Opacity of HUD used by MekaSuit. #Range: 0.0 ~ 1.0 hudOpacity = 0.4000000059604645 #Color (RGB) of HUD used by MekaSuit. #Range: 0 ~ 16777215 hudColor = 4257264 #Color (RGB) of warning HUD elements used by MekaSuit. #Range: 0 ~ 16777215 hudWarningColor = 16768335 #Color (RGB) of danger HUD elements used by MekaSuit. #Range: 0 ~ 16777215 hudDangerColor = 16726076 #Visual jitter of MekaSuit HUD, seen when moving the player's head. Bigger value = more jitter. #Range: 1.0 ~ 100.0 hudJitter = 6.0 #Display a fancy compass when the MekaSuit is worn. mekaSuitHelmetCompass = true #Last Window Positions. In general these values should not be modified manually. [client.gui.window] [client.gui.window.color] x = 2147483647 y = 2147483647 [client.gui.window.confirmation] x = 2147483647 y = 2147483647 [client.gui.window.crafting0] x = 2147483647 y = 2147483647 [client.gui.window.crafting1] x = 2147483647 y = 2147483647 [client.gui.window.crafting2] x = 2147483647 y = 2147483647 [client.gui.window.mekaSuitHelmet] x = 2147483647 y = 2147483647 [client.gui.window.rename] x = 2147483647 y = 2147483647 [client.gui.window.skinSelect] x = 2147483647 y = 2147483647 [client.gui.window.sideConfig] x = 2147483647 y = 2147483647 [client.gui.window.transporterConfig] x = 2147483647 y = 2147483647 [client.gui.window.upgrade] x = 2147483647 y = 2147483647 #QIO Config [client.qio] #Sorting strategy when viewing items in a QIO Item Viewer. #Allowed Values: NAME, SIZE, MOD itemViewerSortType = \"NAME\" #Sorting direction when viewing items in a QIO Item Viewer. #Allowed Values: ASCENDING, DESCENDING itemViewerSortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Item Viewer. #Range: 8 ~ 16 itemViewerSlotsX = 8 #Number of slots to view vertically on a QIO Item Viewer. #Range: 2 ~ 48 itemViewerSlotsY = 4","title":"Configs for 1.20.1"},{"location":"configs/1.20.1/#configs-for-1201","text":"Common Client","title":"Configs for 1.20.1"},{"location":"configs/1.20.1/#common","text":"#Mekanism Common Config. This config is not synced between server and client. [common] #Displayed energy type in Mekanism GUIs and network reader readings. #Allowed Values: JOULES, FORGE_ENERGY, ELECTRICAL_UNITS energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs and network reader readings. #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Show time to decay radiation when readings are above safe levels. Set to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true","title":"Common"},{"location":"configs/1.20.1/#client","text":"#Client Config. This config only exists on the client [client] #Play sounds for Jetpack/Gas Mask/Flamethrower/Radiation (all players). enablePlayerSounds = true #If enabled machines play their sounds while running. enableMachineSounds = true #If enabled tries to force all radial menu text to be white. whiteRadialText = false #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years). holidays = true #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. #Range: 0.0 ~ 10.0 baseSoundVolume = 1.0 #If true, don't render Cables/Pipes/Tubes as transparent and don't render their contents. opaqueTransmitters = false #Allow sneak + scroll to change item modes. allowModeScroll = true #If true will move HUD text alignment and compass rendering to the right side of the screen, and move the MekaSuit module rendering to the left side. reverseHUD = false #Scale of the text displayed on the HUD. #Range: 0.25 ~ 1.0 hudScale = 0.6 #Enable item information HUD during gameplay enableHUD = true #Color of energy in item durability display. energyColor = 3997338 #Range at which Tile Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for TERs to 64 for most blocks, but uses a range of 256 for beacons and end gateways. #Range: 1 ~ 1024 terRange = 256 #Particle Config [client.particle] #Set to false to prevent particle spam when loading multiblocks (notification message will display instead). enableMultiblockFormationParticles = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. #Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). #Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts when the Magnetic Attraction Unit is pulling items. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #GUI Config [client.gui] #Opacity of HUD used by MekaSuit. #Range: 0.0 ~ 1.0 hudOpacity = 0.4000000059604645 #Color (RGB) of HUD used by MekaSuit. #Range: 0 ~ 16777215 hudColor = 4257264 #Color (RGB) of warning HUD elements used by MekaSuit. #Range: 0 ~ 16777215 hudWarningColor = 16768335 #Color (RGB) of danger HUD elements used by MekaSuit. #Range: 0 ~ 16777215 hudDangerColor = 16726076 #Visual jitter of MekaSuit HUD, seen when moving the player's head. Bigger value = more jitter. #Range: 1.0 ~ 100.0 hudJitter = 6.0 #Display a fancy compass when the MekaSuit is worn. mekaSuitHelmetCompass = true #Last Window Positions. In general these values should not be modified manually. [client.gui.window] [client.gui.window.color] x = 2147483647 y = 2147483647 [client.gui.window.confirmation] x = 2147483647 y = 2147483647 [client.gui.window.crafting0] x = 2147483647 y = 2147483647 [client.gui.window.crafting1] x = 2147483647 y = 2147483647 [client.gui.window.crafting2] x = 2147483647 y = 2147483647 [client.gui.window.mekaSuitHelmet] x = 2147483647 y = 2147483647 [client.gui.window.rename] x = 2147483647 y = 2147483647 [client.gui.window.skinSelect] x = 2147483647 y = 2147483647 [client.gui.window.sideConfig] x = 2147483647 y = 2147483647 [client.gui.window.transporterConfig] x = 2147483647 y = 2147483647 [client.gui.window.upgrade] x = 2147483647 y = 2147483647 #QIO Config [client.qio] #Sorting strategy when viewing items in a QIO Item Viewer. #Allowed Values: NAME, SIZE, MOD itemViewerSortType = \"NAME\" #Sorting direction when viewing items in a QIO Item Viewer. #Allowed Values: ASCENDING, DESCENDING itemViewerSortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Item Viewer. #Range: 8 ~ 16 itemViewerSlotsX = 8 #Number of slots to view vertically on a QIO Item Viewer. #Range: 2 ~ 48 itemViewerSlotsY = 4","title":"Client"},{"location":"configs/1.21.1/","text":"Configs for 1.21.1 Common Client Common #Displayed energy type in Mekanism GUIs (client) and network reader readings (server). #Allowed Values: JOULES, FORGE_ENERGY energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs (client) and network reader readings (server). #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Display the time it will take for radiation to decay when readings are above safe levels. Set this to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set this to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true #Determines whether machine configuration data is copied when using middle click. If this is set to false no data will be copied and the default instance of the stack will be returned. copyBlockData = true #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years) on the client. Also controls whether Robit's with the default skin should have their skin randomized on the server. holidays = true Client #Settings for configuring Accessibility settings provided by Mekanism. Note: Some settings such as HUD scale, may be located throughout the rest of this config. [accessibility] #Tries to force all text rendered as part of radial menus to be white instead of the color of the slice's mode. whiteRadialText = false #If true, renders sides for Universal Cables, Mechanical Pipes, Pressurized Tubes, Logistical Transporters, and Thermodynamic Conductors instead of rendering their contents. If transmitters are causing you fps issues, this should hopefully help. opaqueTransmitters = false #Allows changing the mode of held items by holding sneak and using the scroll wheel. allowModeScroll = true #Settings for configuring Mekanism's Sounds [sounds] #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. # Default: 1.0 # Range: 0.0 ~ 10.0 baseVolume = 1.0 #Play sounds for when any player is using a Jetpack, Scuba Mask, Flamethrower, or Gravitational Modulating Unit. This also affects playing the Radiation clicking sound. enablePlayer = true #Play sounds for active machines. enableMachine = true #Settings for adjusting how Mekanism render's certain blocks and how many particles Mekanism adds. [rendering] #The color of energy when displayed as the durability bar on items. energyColor = 3997338 #Range at which Block Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for BERs to 64 for most blocks (for example chests), but uses a range of 256 for blocks like beacons and end gateways. Lowering this will likely increase your performance, at the cost of multiblock contents and wind generators 'popping' in # Default: 256 # Range: 1 ~ 1024 berRange = 256 #Settings for configuring Mekanism's Particles [rendering.particle] #When multiblock forms, represent that by red sparkles around the multiblock. If this is disabled a notification message will display on the action bar instead. multiblockFormation = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. # Default: 30 # Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). # Default: 100 # Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts between the player and items when the Magnetic Attraction Unit is pulling items towards a player. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #Settings for configuring Mekanism's HUD [hud] #Enable a HUD that displays information about equipped Mekanism items, and displays additional information when wearing a MekaSuit Helmet. enabled = true #Scale of the text displayed on the HUD. # Default: 0.6 # Range: 0.25 ~ 1.0 scale = 0.6 #Reverses the HUD's text alignment and compass rendering to the right side of the screen, and moves the MekaSuit module rendering to the left side. Warning: This may cause subtitles to overlap parts of the HUD such as the compass. reverse = false #Opacity of HUD used by MekaSuit. # Default: 0.4000000059604645 # Range: 0.0 ~ 1.0 opacity = 0.4000000059604645 #Color (RGB) of HUD used by MekaSuit. # Default: 4257264 # Range: 0 ~ 16777215 color = 4257264 #Color (RGB) of warning HUD elements used by MekaSuit. # Default: 16768335 # Range: 0 ~ 16777215 warningColor = 16768335 #Color (RGB) of danger HUD elements used by MekaSuit. # Default: 16726076 # Range: 0 ~ 16777215 dangerColor = 16726076 #Visual jitter of the MekaSuit HUD, seen when moving the player's head. Higher values increases the amount of jitter. # Default: 6.0 # Range: 1.0 ~ 100.0 jitter = 6.0 #Display a fancy compass when the MekaSuit Helmet is worn. mekaSuitHelmetCompass = true #Settings for configuring Mekanism's QIO [qio] #Sorting strategy when viewing items in a QIO Dashboard. #Allowed Values: NAME, SIZE, MOD, REGISTRY_NAME sortType = \"NAME\" #Sorting direction when viewing items in a QIO Dashboard. #Allowed Values: ASCENDING, DESCENDING sortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Dashboard. # Default: 8 # Range: 8 ~ 16 slotsWide = 8 #Number of slots to view vertically on a QIO Dashboard. # Default: 4 # Range: 2 ~ 48 slotsTall = 4 #Determines whether the search bar is automatically focused when a QIO Dashboard is opened. autoFocusSearchBar = true #Determines if items in a QIO crafting window should be moved to the player's inventory or the frequency first when replacing the items in the crafting grid using a recipe viewer. rejectsToInventory = false #Stores the last position various windows were in when they were closed, and whether they are pinned. In general these values should not be modified manually. [window] #The last position the Color window was in when it was closed. [window.color] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Confirmation window was in when it was closed. [window.confirmation] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting0] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting1] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting2] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Mekasuit Helmet window was in when it was closed. [window.mekasuit_helmet] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Rename window was in when it was closed. [window.rename] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Skin Select window was in when it was closed. [window.skin_select] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Side Config window was in when it was closed, and whether it was pinned. [window.side_config] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Transporter Config window was in when it was closed, and whether it was pinned. [window.transporter_config] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Upgrade window was in when it was closed, and whether it was pinned. [window.upgrade] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false","title":"Configs for 1.21.1"},{"location":"configs/1.21.1/#configs-for-1211","text":"Common Client","title":"Configs for 1.21.1"},{"location":"configs/1.21.1/#common","text":"#Displayed energy type in Mekanism GUIs (client) and network reader readings (server). #Allowed Values: JOULES, FORGE_ENERGY energyType = \"FORGE_ENERGY\" #Displayed temperature unit in Mekanism GUIs (client) and network reader readings (server). #Allowed Values: KELVIN, CELSIUS, RANKINE, FAHRENHEIT, AMBIENT temperatureUnit = \"KELVIN\" #Display the time it will take for radiation to decay when readings are above safe levels. Set this to false on the client side to disable MekaSuit Geiger and Dosimeter Unit timers. Set this to false on the server side to disable handheld Geiger Counter and Dosimeter timers. enableDecayTimers = true #Determines whether machine configuration data is copied when using middle click. If this is set to false no data will be copied and the default instance of the stack will be returned. copyBlockData = true #Should holiday greetings and easter eggs play for holidays (ex: Christmas and New Years) on the client. Also controls whether Robit's with the default skin should have their skin randomized on the server. holidays = true","title":"Common"},{"location":"configs/1.21.1/#client","text":"#Settings for configuring Accessibility settings provided by Mekanism. Note: Some settings such as HUD scale, may be located throughout the rest of this config. [accessibility] #Tries to force all text rendered as part of radial menus to be white instead of the color of the slice's mode. whiteRadialText = false #If true, renders sides for Universal Cables, Mechanical Pipes, Pressurized Tubes, Logistical Transporters, and Thermodynamic Conductors instead of rendering their contents. If transmitters are causing you fps issues, this should hopefully help. opaqueTransmitters = false #Allows changing the mode of held items by holding sneak and using the scroll wheel. allowModeScroll = true #Settings for configuring Mekanism's Sounds [sounds] #Adjust Mekanism sounds' base volume. < 1 is softer, higher is louder. # Default: 1.0 # Range: 0.0 ~ 10.0 baseVolume = 1.0 #Play sounds for when any player is using a Jetpack, Scuba Mask, Flamethrower, or Gravitational Modulating Unit. This also affects playing the Radiation clicking sound. enablePlayer = true #Play sounds for active machines. enableMachine = true #Settings for adjusting how Mekanism render's certain blocks and how many particles Mekanism adds. [rendering] #The color of energy when displayed as the durability bar on items. energyColor = 3997338 #Range at which Block Entity Renderer's added by Mekanism can render at, for example the contents of multiblocks. Vanilla defaults the rendering range for BERs to 64 for most blocks (for example chests), but uses a range of 256 for blocks like beacons and end gateways. Lowering this will likely increase your performance, at the cost of multiblock contents and wind generators 'popping' in # Default: 256 # Range: 1 ~ 1024 berRange = 256 #Settings for configuring Mekanism's Particles [rendering.particle] #When multiblock forms, represent that by red sparkles around the multiblock. If this is disabled a notification message will display on the action bar instead. multiblockFormation = true #Show particles when machines active. machineEffects = true #How far (in blocks) from the player radiation particles can spawn. # Default: 30 # Range: 2 ~ 64 radiationParticleRadius = 30 #How many particles spawn when rendering radiation effects (scaled by radiation level). # Default: 100 # Range: 0 ~ 1000 radiationParticleCount = 100 #Show bolts between the player and items when the Magnetic Attraction Unit is pulling items towards a player. magneticAttraction = true #Show bolts for various AOE tool behaviors such as tilling, debarking, and vein mining. toolAOE = true #Settings for configuring Mekanism's HUD [hud] #Enable a HUD that displays information about equipped Mekanism items, and displays additional information when wearing a MekaSuit Helmet. enabled = true #Scale of the text displayed on the HUD. # Default: 0.6 # Range: 0.25 ~ 1.0 scale = 0.6 #Reverses the HUD's text alignment and compass rendering to the right side of the screen, and moves the MekaSuit module rendering to the left side. Warning: This may cause subtitles to overlap parts of the HUD such as the compass. reverse = false #Opacity of HUD used by MekaSuit. # Default: 0.4000000059604645 # Range: 0.0 ~ 1.0 opacity = 0.4000000059604645 #Color (RGB) of HUD used by MekaSuit. # Default: 4257264 # Range: 0 ~ 16777215 color = 4257264 #Color (RGB) of warning HUD elements used by MekaSuit. # Default: 16768335 # Range: 0 ~ 16777215 warningColor = 16768335 #Color (RGB) of danger HUD elements used by MekaSuit. # Default: 16726076 # Range: 0 ~ 16777215 dangerColor = 16726076 #Visual jitter of the MekaSuit HUD, seen when moving the player's head. Higher values increases the amount of jitter. # Default: 6.0 # Range: 1.0 ~ 100.0 jitter = 6.0 #Display a fancy compass when the MekaSuit Helmet is worn. mekaSuitHelmetCompass = true #Settings for configuring Mekanism's QIO [qio] #Sorting strategy when viewing items in a QIO Dashboard. #Allowed Values: NAME, SIZE, MOD, REGISTRY_NAME sortType = \"NAME\" #Sorting direction when viewing items in a QIO Dashboard. #Allowed Values: ASCENDING, DESCENDING sortDirection = \"ASCENDING\" #Number of slots to view horizontally on a QIO Dashboard. # Default: 8 # Range: 8 ~ 16 slotsWide = 8 #Number of slots to view vertically on a QIO Dashboard. # Default: 4 # Range: 2 ~ 48 slotsTall = 4 #Determines whether the search bar is automatically focused when a QIO Dashboard is opened. autoFocusSearchBar = true #Determines if items in a QIO crafting window should be moved to the player's inventory or the frequency first when replacing the items in the crafting grid using a recipe viewer. rejectsToInventory = false #Stores the last position various windows were in when they were closed, and whether they are pinned. In general these values should not be modified manually. [window] #The last position the Color window was in when it was closed. [window.color] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Confirmation window was in when it was closed. [window.confirmation] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting0] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting1] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Crafting window was in when it was closed, and whether it was pinned. [window.crafting2] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Mekasuit Helmet window was in when it was closed. [window.mekasuit_helmet] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Rename window was in when it was closed. [window.rename] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Skin Select window was in when it was closed. [window.skin_select] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #The last position the Side Config window was in when it was closed, and whether it was pinned. [window.side_config] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Transporter Config window was in when it was closed, and whether it was pinned. [window.transporter_config] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false #The last position the Upgrade window was in when it was closed, and whether it was pinned. [window.upgrade] #The x component of this window's last position. x = 2147483647 #The y component of this window's last position. y = 2147483647 #Determines whether this window is pinned, and should open automatically when the GUI is reopened. pinned = false","title":"Client"},{"location":"multiblocks/multiblocks/","text":"Multiblocks Mekanism incorporates several multiblocks into its core gameplay. They are listed below, for reference. By mod / abbreviation Mekanism Dynamic Tank (DT) Induction Matrix (IM) Supercritical Phase Shifter (SPS) Thermal Evaporation Plant (TEP) Thermoelectric Boiler (TB) Mekanism Generators Fission Reactor (FiR) Fusion Reactor (FuR) Industrial Turbine (IT) By category Crafting-related Supercritical Phase Shifter [synthesizes Antimatter] Thermal Evaporation Plant [makes Brine & Lithium] Fission Reactor [outputs Nuclear Waste as a byproduct] Storage-related Dynamic Tank [stores fluids] Induction Matrix [stores energy] Power-related Thermoelectric Boiler [exchanges heat between coolants] Fission Reactor [casts heat from nuclear fission into coolant] Fusion Reactor [makes power from nuclear fusion] Industrial Turbine [turns steam into power] By progression Thermal Evaporation Plant [to produce useful substances] Induction Matrix [to store the reams of energy obtained later] Industrial Turbine [to convert steam from the FiR / TB into power] Fission Reactor [to create steam for the IT] Thermoelectric Boiler [for sodium-cooling the FiR] Fusion Reactor [to generate ungodly amounts of power] Supercritical Phase Shifter [to create Antimatter] By constitution Any glass : either Reactor Glass or Structural Glass . Multiblock Constituents Dynamic Tank (frame) Dynamic <Tank / Valve> Any glass Induction Matrix (frame) Induction <Casing / Port> Any glass Induction Matrix (inner) Induction <Provider / Cell> Air Thermal Evaporation Plant Thermal Evaporation <Block / Valve / Controller> Advanced Solar Generator Thermoelectric Boiler (frame) Boiler <Casing / Valve> Any glass Thermoelectric Boiler (inner) Pressure Disperser Superheating Element Air Fission Reactor (frame) Fission Reactor <Casing / Port / Logic Adapter> Reactor Glass Fission Reactor (inner) <Fission Fuel / Control Rod> Assembly Air Fusion Reactor Fusion Reactor <Frame / Port / Controller / Logic Adapter> Laser Focus Matrix Reactor Glass Industrial Turbine (frame) Turbine <Casing / Valve / Vent> Any glass Industrial Turbine (inner) Turbine <Rotor / Blades> Rotational Complex Pressure Disperser Electromagnetic Coil Saturating Condenser Air","title":"Multiblocks"},{"location":"multiblocks/multiblocks/#multiblocks","text":"Mekanism incorporates several multiblocks into its core gameplay. They are listed below, for reference.","title":"Multiblocks"},{"location":"multiblocks/multiblocks/#by-mod-abbreviation","text":"","title":"By mod / abbreviation"},{"location":"multiblocks/multiblocks/#mekanism","text":"Dynamic Tank (DT) Induction Matrix (IM) Supercritical Phase Shifter (SPS) Thermal Evaporation Plant (TEP) Thermoelectric Boiler (TB)","title":"Mekanism"},{"location":"multiblocks/multiblocks/#mekanism-generators","text":"Fission Reactor (FiR) Fusion Reactor (FuR) Industrial Turbine (IT)","title":"Mekanism Generators"},{"location":"multiblocks/multiblocks/#by-category","text":"","title":"By category"},{"location":"multiblocks/multiblocks/#crafting-related","text":"Supercritical Phase Shifter [synthesizes Antimatter] Thermal Evaporation Plant [makes Brine & Lithium] Fission Reactor [outputs Nuclear Waste as a byproduct]","title":"Crafting-related"},{"location":"multiblocks/multiblocks/#storage-related","text":"Dynamic Tank [stores fluids] Induction Matrix [stores energy]","title":"Storage-related"},{"location":"multiblocks/multiblocks/#power-related","text":"Thermoelectric Boiler [exchanges heat between coolants] Fission Reactor [casts heat from nuclear fission into coolant] Fusion Reactor [makes power from nuclear fusion] Industrial Turbine [turns steam into power]","title":"Power-related"},{"location":"multiblocks/multiblocks/#by-progression","text":"Thermal Evaporation Plant [to produce useful substances] Induction Matrix [to store the reams of energy obtained later] Industrial Turbine [to convert steam from the FiR / TB into power] Fission Reactor [to create steam for the IT] Thermoelectric Boiler [for sodium-cooling the FiR] Fusion Reactor [to generate ungodly amounts of power] Supercritical Phase Shifter [to create Antimatter]","title":"By progression"},{"location":"multiblocks/multiblocks/#by-constitution","text":"Any glass : either Reactor Glass or Structural Glass . Multiblock Constituents Dynamic Tank (frame) Dynamic <Tank / Valve> Any glass Induction Matrix (frame) Induction <Casing / Port> Any glass Induction Matrix (inner) Induction <Provider / Cell> Air Thermal Evaporation Plant Thermal Evaporation <Block / Valve / Controller> Advanced Solar Generator Thermoelectric Boiler (frame) Boiler <Casing / Valve> Any glass Thermoelectric Boiler (inner) Pressure Disperser Superheating Element Air Fission Reactor (frame) Fission Reactor <Casing / Port / Logic Adapter> Reactor Glass Fission Reactor (inner) <Fission Fuel / Control Rod> Assembly Air Fusion Reactor Fusion Reactor <Frame / Port / Controller / Logic Adapter> Laser Focus Matrix Reactor Glass Industrial Turbine (frame) Turbine <Casing / Valve / Vent> Any glass Industrial Turbine (inner) Turbine <Rotor / Blades> Rotational Complex Pressure Disperser Electromagnetic Coil Saturating Condenser Air","title":"By constitution"},{"location":"systems/heat-system/","text":"The Heat System Introduction This document chronicles the design and development of a (relatively) principled heat system. The main reason for it is as a potential resort to the numerous difficulties and shortcomings of the current offering. The document is split into two main sections: core concepts and technical details . The former provides some background and an overview, whilst the latter dives deeper into how such a system might be implemented, along with any other miscellaneous concerns. Preliminaries (Feel free to skip to the next section if you either don\u2019t care or already know the stuff.) A little bit of thermodynamics Thermodynamic systems can be measured and categorised in many ways. For now, we are most interested in the basic physical quantities, such as temperature (K, \u00b0C, \u00b0F), heat energy (J, kJ), specific heat capacity (J/g-K), heat capacity (J/K), and mass (g, kg). Here\u2019s a couple ways they\u2019re related: heat capacity = specific heat \u00d7 mass temperature = heat energy \u00f7 heat capacity heat energy = temperature \u00d7 heat capacity There are a few other quantities like thermal conductivity and resistivity which are important when modelling heat flow as a function of time, and are used in e.g. Fourier\u2019s law , but are beyond the scope of this document. A little bit of simulation Heating simulations in many ways resemble physics-sims you\u2019ll find in most large game engines. Each thing (or body) in the system tracks two important variables: position and velocity . During every epoch (or tick) the velocity is cumulatively modified by (perhaps several) applications of impulse force. At the end of each tick, when all is said and done, the velocity is added to the position and cleared, and thus a single iteration of chosen simulation method is concluded. It is much the same way with a heat-sim, except that position and velocity are replaced by stored heat and heat flux , respectively. Core Concepts The proposed system works with several fundamental concepts and objects. Here they are briefly defined, with more details given later. A handy shopping list of components: Heat capacitors Heat contacts Heat manifolds Heat islands Heat handlers (TODO) Heat Capacitor The most basic unit of heat storage. Capacitors store heat in the form of energy (J); they are also ascribed a heat capacity and various thermal properties ( thermals ) such as conductivity and insulation, which govern their behaviour through heat contacts . Thermals may be provided for the entire capacitor (directionless) or for any direction representing a side of that capacitor. Heat Contact A building block of inter- capacitor thermodynamics. In a nutshell: contacts facilitate heat traffic between one or more capacitors. In practice, they serve two overlapping purposes: to introduce heat energy into the system; to thermally bond a group of capacitors. Heat Manifold The interconnection of a single heat capacitor to any other capacitors, via heat contacts . Manifolds are convenient for modelling heat at the scale of a multi-faceted device, such as a heater, reactor, boiler, etc. While a device itself may only manage a single capacitor, a manifold for it will manage the connections that capacitor may have to external elements, such as adjacent tiles, the environment, and so on. Heat Island An aggregation of the above components into a single structure, constrained to a single network of heat-supporting devices. It exists for the most part to optimize the entire simulation (especially at a large scale) and is otherwise not essential to the system. Technical Details Heat Capacitor For the sake of numerical simulation, each heat capacitor stores a delta heatToHandle which accumulates individual transfers of heat energy that take place within a tick. This task is assigned to the handleHeat() instance method. By the end of the tick, this quantity is dumped into the total storedHeat of the capacitor. This task is assigned to the updateHeat() instance method. Heat capacitors are outlined by the IHeatCapacitor interface, and basically implemented by the BasicHeatCapacitor class. Heat Contact Although the heat-contact interface is general enough to support any number of degrees of contact, there are currently only two types of contacts defined, which should serve most if not all use cases: monadic (single-capacitor)\u2014outlined by the IMonadicHeatContact interface; dyadic (double-capacitor)\u2014outlined by the IDyadicHeatContact interface. Contacts may be directional, in that each member capacitor may have an associated direction. This is useful in representing the facets of a capacitor, such as the sides of a block/tile containing one. An example of a monadic contact is an environmental connection. Here is a sample of the simulate() instance method for such a contact: @Override public double simulate(long currentTime) { double invConduction = Thermals.environmentConduction(source, side); double tempToTransfer = (source.getTemperature() - HeatAPI.AMBIENT_TEMP) / invConduction; source.handleHeat(-tempToTransfer * source.getHeatCapacity()); return Math.max(0, tempToTransfer); } (Notice that only a single capacitor source and direction side is needed for this type of contact. Also note that the method takes a currentTime parameter. This will be explained later.) An example of a dyadic contact is an adjacent connection. Here is a sample of the simulate() instance method for such a contact: @Override public double simulate(long currentTime) { double invConduction = Thermals.adjacentConduction(this); double tempToTransfer = (second.getTemperature() - first.getTemperature()) / invConduction; double heatToTransfer = tempToTransfer * first.getHeatCapacity(); first.handleHeat(-heatToTransfer); second.handleHeat(heatToTransfer); return tempToTransfer; } (Notice that two capacitors [and implicitly two directions]\u2014one which is opposite the other\u2014are employed for this type of contact.) An example for the Thermal Evaporation Plant is provided at the end . Heat Manifold The design of the heat manifold promotes contact sharing through its methods, which cuts down on memory usage and simplifies some of the simulation concerns. However, as a contact instance may be tracked by multiple manifolds (doing double-duty ), further concessions may need to be made. Since it is assumed that no contact be simulated twice in the same way within a tick, manifolds should reasonably have idempotent countermeasures. This can be achieved by the addition of a lastSimulationTime variable, which (unsurprisingly) keeps track of the game time of the last simulation tick; and upon being requested to simulate again during the same tick, simply does nothing. To aid in this, the simulate() method takes a currentTime argument, which is obtained by the caller (most likely from Level#getGameTime() ) and passed through the call chain. Heat Island In the way of optimization, an island can maintain an internal collection of capacitors and interfaces, which it efficiently iterates through every tick, rather than, say, having to peruse every manifold which would in most cases repeat-visit contacts. Examples Thermal Evaporation Plant Following is a possible implementation of IMonadicHeatContact for use by the Thermal Evaporation Plant. Disclaimer: This has in large part been lifted from the existing implementation; there is potential for improvement. public class EvaporationHeatContact implements IMonadicHeatContact { private long lastSimulationTime = -1; private final IntSupplier activeSolarsSupplier; private final DoubleSupplier ambientTempSupplier; public EvaporationHeatContactBasic(IHeatCapacitor heatCapacitor, IntSupplier activeSolarsSupplier, DoubleSupplier ambientTempSupplier) { super(heatCapacitor); this.activeSolarsSupplier = activeSolarsSupplier; this.ambientTempSupplier = ambientTempSupplier; } protected double getAmbientTemperature() { return ambientTempSupplier == null ? HeatAPI.AMBIENT_TEMP : ambientTempSupplier.getAsDouble(); } @Override public double simulate(long currentTime) { if (currentTime <= lastSimulationTime) { return; } lastSimulationTime = currentTime; double currentTemp = getCapacitor().getTemperature(); int activeSolars = activeSolarsSupplier.getAsInt(); double ambientTemp = getAmbientTemperature(); double heatCapacity = getCapacitor().getHeatCapacity(); capacitor.handleHeat(activeSolars * MekanismConfig.general.evaporationSolarMultiplier.get() * heatCapacity); if (Math.abs(currentTemp - ambientTemp) < 0.001) { capacitor.handleHeat(ambientTemp * heatCapacity - capacitor.getHeat()); } else { double incr = MekanismConfig.general.evaporationHeatDissipation.get() * Math.sqrt(Math.abs(currentTemp - ambientTemp)); if (currentTemp > ambientTemp) { incr = -incr; } capacitor.handleHeat(heatCapacity * incr); if (incr < 0) { return -incr; } } return 0; } }","title":"The Heat System"},{"location":"systems/heat-system/#the-heat-system","text":"","title":"The Heat System"},{"location":"systems/heat-system/#introduction","text":"This document chronicles the design and development of a (relatively) principled heat system. The main reason for it is as a potential resort to the numerous difficulties and shortcomings of the current offering. The document is split into two main sections: core concepts and technical details . The former provides some background and an overview, whilst the latter dives deeper into how such a system might be implemented, along with any other miscellaneous concerns.","title":"Introduction"},{"location":"systems/heat-system/#preliminaries","text":"(Feel free to skip to the next section if you either don\u2019t care or already know the stuff.)","title":"Preliminaries"},{"location":"systems/heat-system/#a-little-bit-of-thermodynamics","text":"Thermodynamic systems can be measured and categorised in many ways. For now, we are most interested in the basic physical quantities, such as temperature (K, \u00b0C, \u00b0F), heat energy (J, kJ), specific heat capacity (J/g-K), heat capacity (J/K), and mass (g, kg). Here\u2019s a couple ways they\u2019re related: heat capacity = specific heat \u00d7 mass temperature = heat energy \u00f7 heat capacity heat energy = temperature \u00d7 heat capacity There are a few other quantities like thermal conductivity and resistivity which are important when modelling heat flow as a function of time, and are used in e.g. Fourier\u2019s law , but are beyond the scope of this document.","title":"A little bit of thermodynamics"},{"location":"systems/heat-system/#a-little-bit-of-simulation","text":"Heating simulations in many ways resemble physics-sims you\u2019ll find in most large game engines. Each thing (or body) in the system tracks two important variables: position and velocity . During every epoch (or tick) the velocity is cumulatively modified by (perhaps several) applications of impulse force. At the end of each tick, when all is said and done, the velocity is added to the position and cleared, and thus a single iteration of chosen simulation method is concluded. It is much the same way with a heat-sim, except that position and velocity are replaced by stored heat and heat flux , respectively.","title":"A little bit of simulation"},{"location":"systems/heat-system/#core-concepts","text":"The proposed system works with several fundamental concepts and objects. Here they are briefly defined, with more details given later. A handy shopping list of components: Heat capacitors Heat contacts Heat manifolds Heat islands Heat handlers (TODO)","title":"Core Concepts"},{"location":"systems/heat-system/#heat-capacitor","text":"The most basic unit of heat storage. Capacitors store heat in the form of energy (J); they are also ascribed a heat capacity and various thermal properties ( thermals ) such as conductivity and insulation, which govern their behaviour through heat contacts . Thermals may be provided for the entire capacitor (directionless) or for any direction representing a side of that capacitor.","title":"Heat Capacitor"},{"location":"systems/heat-system/#heat-contact","text":"A building block of inter- capacitor thermodynamics. In a nutshell: contacts facilitate heat traffic between one or more capacitors. In practice, they serve two overlapping purposes: to introduce heat energy into the system; to thermally bond a group of capacitors.","title":"Heat Contact"},{"location":"systems/heat-system/#heat-manifold","text":"The interconnection of a single heat capacitor to any other capacitors, via heat contacts . Manifolds are convenient for modelling heat at the scale of a multi-faceted device, such as a heater, reactor, boiler, etc. While a device itself may only manage a single capacitor, a manifold for it will manage the connections that capacitor may have to external elements, such as adjacent tiles, the environment, and so on.","title":"Heat Manifold"},{"location":"systems/heat-system/#heat-island","text":"An aggregation of the above components into a single structure, constrained to a single network of heat-supporting devices. It exists for the most part to optimize the entire simulation (especially at a large scale) and is otherwise not essential to the system.","title":"Heat Island"},{"location":"systems/heat-system/#technical-details","text":"","title":"Technical Details"},{"location":"systems/heat-system/#heat-capacitor_1","text":"For the sake of numerical simulation, each heat capacitor stores a delta heatToHandle which accumulates individual transfers of heat energy that take place within a tick. This task is assigned to the handleHeat() instance method. By the end of the tick, this quantity is dumped into the total storedHeat of the capacitor. This task is assigned to the updateHeat() instance method. Heat capacitors are outlined by the IHeatCapacitor interface, and basically implemented by the BasicHeatCapacitor class.","title":"Heat Capacitor"},{"location":"systems/heat-system/#heat-contact_1","text":"Although the heat-contact interface is general enough to support any number of degrees of contact, there are currently only two types of contacts defined, which should serve most if not all use cases: monadic (single-capacitor)\u2014outlined by the IMonadicHeatContact interface; dyadic (double-capacitor)\u2014outlined by the IDyadicHeatContact interface. Contacts may be directional, in that each member capacitor may have an associated direction. This is useful in representing the facets of a capacitor, such as the sides of a block/tile containing one. An example of a monadic contact is an environmental connection. Here is a sample of the simulate() instance method for such a contact: @Override public double simulate(long currentTime) { double invConduction = Thermals.environmentConduction(source, side); double tempToTransfer = (source.getTemperature() - HeatAPI.AMBIENT_TEMP) / invConduction; source.handleHeat(-tempToTransfer * source.getHeatCapacity()); return Math.max(0, tempToTransfer); } (Notice that only a single capacitor source and direction side is needed for this type of contact. Also note that the method takes a currentTime parameter. This will be explained later.) An example of a dyadic contact is an adjacent connection. Here is a sample of the simulate() instance method for such a contact: @Override public double simulate(long currentTime) { double invConduction = Thermals.adjacentConduction(this); double tempToTransfer = (second.getTemperature() - first.getTemperature()) / invConduction; double heatToTransfer = tempToTransfer * first.getHeatCapacity(); first.handleHeat(-heatToTransfer); second.handleHeat(heatToTransfer); return tempToTransfer; } (Notice that two capacitors [and implicitly two directions]\u2014one which is opposite the other\u2014are employed for this type of contact.) An example for the Thermal Evaporation Plant is provided at the end .","title":"Heat Contact"},{"location":"systems/heat-system/#heat-manifold_1","text":"The design of the heat manifold promotes contact sharing through its methods, which cuts down on memory usage and simplifies some of the simulation concerns. However, as a contact instance may be tracked by multiple manifolds (doing double-duty ), further concessions may need to be made. Since it is assumed that no contact be simulated twice in the same way within a tick, manifolds should reasonably have idempotent countermeasures. This can be achieved by the addition of a lastSimulationTime variable, which (unsurprisingly) keeps track of the game time of the last simulation tick; and upon being requested to simulate again during the same tick, simply does nothing. To aid in this, the simulate() method takes a currentTime argument, which is obtained by the caller (most likely from Level#getGameTime() ) and passed through the call chain.","title":"Heat Manifold"},{"location":"systems/heat-system/#heat-island_1","text":"In the way of optimization, an island can maintain an internal collection of capacitors and interfaces, which it efficiently iterates through every tick, rather than, say, having to peruse every manifold which would in most cases repeat-visit contacts.","title":"Heat Island"},{"location":"systems/heat-system/#examples","text":"","title":"Examples"},{"location":"systems/heat-system/#thermal-evaporation-plant","text":"Following is a possible implementation of IMonadicHeatContact for use by the Thermal Evaporation Plant. Disclaimer: This has in large part been lifted from the existing implementation; there is potential for improvement. public class EvaporationHeatContact implements IMonadicHeatContact { private long lastSimulationTime = -1; private final IntSupplier activeSolarsSupplier; private final DoubleSupplier ambientTempSupplier; public EvaporationHeatContactBasic(IHeatCapacitor heatCapacitor, IntSupplier activeSolarsSupplier, DoubleSupplier ambientTempSupplier) { super(heatCapacitor); this.activeSolarsSupplier = activeSolarsSupplier; this.ambientTempSupplier = ambientTempSupplier; } protected double getAmbientTemperature() { return ambientTempSupplier == null ? HeatAPI.AMBIENT_TEMP : ambientTempSupplier.getAsDouble(); } @Override public double simulate(long currentTime) { if (currentTime <= lastSimulationTime) { return; } lastSimulationTime = currentTime; double currentTemp = getCapacitor().getTemperature(); int activeSolars = activeSolarsSupplier.getAsInt(); double ambientTemp = getAmbientTemperature(); double heatCapacity = getCapacitor().getHeatCapacity(); capacitor.handleHeat(activeSolars * MekanismConfig.general.evaporationSolarMultiplier.get() * heatCapacity); if (Math.abs(currentTemp - ambientTemp) < 0.001) { capacitor.handleHeat(ambientTemp * heatCapacity - capacitor.getHeat()); } else { double incr = MekanismConfig.general.evaporationHeatDissipation.get() * Math.sqrt(Math.abs(currentTemp - ambientTemp)); if (currentTemp > ambientTemp) { incr = -incr; } capacitor.handleHeat(heatCapacity * incr); if (incr < 0) { return -incr; } } return 0; } }","title":"Thermal Evaporation Plant"}]}